#2
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def insert(root, data):
    if root is None:
        return Node(data)
    else:
        if data < root.data:
            root.left = insert(root.left, data)
        else:
            root.right = insert(root.right, data)
    return root

def inorder_traversal(node):
    if node:
        inorder_traversal(node.left)
        print(node.data, end="")
        inorder_traversal(node.right)

# Список чисел
data = [6, 1, 3, 8, 5, 4, 7]

# Создание корня дерева
root = Node(data[0])

# Добавление остальных элементов в дерево
for i in range(1, len(data)):
    insert(root, data[i])

# Обход дерева в порядке "левое поддерево - корень - правое поддерево"
inorder_traversal(root)



#5
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1

def height(node):
    if node is None:
        return 0
    return node.height

def balance_factor(node):
    if node is None:
        return 0
    return height(node.left) - height(node.right)

def right_rotate(y):
    x = y.left
    T2 = x.right
    x.right = y
    y.left = T2
    y.height = max(height(y.left), height(y.right)) + 1
    x.height = max(height(x.left), height(x.right)) + 1
    return x

def left_rotate(x):
    y = x.right
    T2 = y.left
    y.left = x
    x.right = T2
    x.height = max(height(x.left), height(x.right)) + 1
    y.height = max(height(y.left), height(y.right)) + 1
    return y

def insert(node, key, rotations):
    if node is None:
        return Node(key)

    if key < node.key:
        node.left = insert(node.left, key, rotations)
    else:
        node.right = insert(node.right, key, rotations)

    node.height = 1 + max(height(node.left), height(node.right))

    balance = balance_factor(node)

    # Left Left Case
    if balance > 1 and key < node.left.key:
        rotations.append("R")
        return right_rotate(node)

    # Right Right Case
    if balance < -1 and key > node.right.key:
        rotations.append("L")
        return left_rotate(node)

    # Left Right Case
    if balance > 1 and key > node.left.key:
        rotations.append("LR")
        node.left = left_rotate(node.left)
        return right_rotate(node)

    # Right Left Case
    if balance < -1 and key < node.right.key:
        rotations.append("RL")
        node.right = right_rotate(node.right)
        return left_rotate(node)

    return node

def get_leaves(node, leaves):
    if node is None:
        return
    if node.left is None and node.right is None:
        leaves.append(str(node.key))
    get_leaves(node.left, leaves)
    get_leaves(node.right, leaves)

# Последовательность чисел
data = [35, 15, 12, 22, 27, 20, 37]
rotations = []
root = None

# Построение дерева с балансировкой
for key in data:
    root = insert(root, key, rotations)

leaves = []
get_leaves(root, leaves)

# Вывод результата
print("".join(leaves), "".join(rotations))







#7
import math
for i in range(1, 200):
    if (math.factorial(i) // math.factorial(138)) % 11 == 2:
        print(i)
        break




#9
a=[33,38,56,89,85]#входные данные
b=17#делитель
d=[]
k=0
for i in range(len(a)):
    d.append(a[i]%b)
print(d)
for i in range(len(d)):
    print(d.count(d[i]))
    if d.count(d[i])>1:
        k+=a[i]
print(k)




#10
a=input()#первое число
b=input()#второе число
a=int(a,16)
b=int(b,16)
a=str(bin(a))[2:]
a="0"*(8-len(a))+a
b=str(bin(b))[2:]
b="0"*(8-len(b))+b
s=""
for i in range(len(a)):
    if a[i]=="0" and b[i]=="0":
        s+="0"
    elif a[i]=="1" and b[i]=="1":
        s+="0"
    else:
        s+="1"
print(str(hex(int(s,2)))[2:].upper())









#11
f=open("output.txt")
n=0
s=0
k=0
k1=0
for x in f:
    z=x.split(";")
    if z[2]=="9" and int(z[3])>250:
        n+=1
    if z[1]=="3":
        s+=int(z[3])
        k+=1
    if z[1]=="48" or  z[1]=="49" or z[1]=="46":
        k1+=1
print(n)
print(s/k)
print(k1)


#12
f=open("Задание 11_1.csv")
n=0
for x in f:
    z=x.split(";")
    d=[]
    for i in range(len(z)):
        z[i]=int(z[i])
    for j in z:
        d.append(z.count(j))
    s1=0
    s2=0
    if d.count(4)==4 and d.count(1)==3:
        for i in range(len(z)):
            if d[i]==4:
                s2=s2+z[i]
            if d[i]==1:
                s1=s1+z[i]
        if s2/4>s1/3:
            n+=1
        print(z)
        print(d)
print(n)




#13
def s(st):
    ans = ''
    mb = []
    count = 1
    ans += st[0]
    for i in range(len(st) - 1):
        if st[i] != st[i + 1]:
            ans += st[i + 1]
            mb.append(count)
            count = 1
        else:
            count += 1
    ans1 = ""
    for i in ans:
        if i != ans[len(ans) - 1]:
            ans1 += i
    return ans1, mb

a = input()
b = input()
c = input()


ans1, mb1 = s(a + "_")
ans2, mb2 = s(b + "_")
ans3, mb3 = s(c + "_")

z = [0]*len(mb1)
otv = ''
for i in range(len(mb1)):
    z[i] = (mb1[i] + mb2[i] + mb3[i]) - max(mb1[i], mb2[i], mb3[i]) - min(mb1[i], mb2[i], mb3[i])
    otv += ans1[i] * z[i]

if ans1 == ans2 == ans3:
    print(otv)
else:
    print("IMPOSIBLE")






#14
def f(a):
    sp = []
    for i in range(1, a//2 + 1):
        if a % i == 0:
            sp.append(i)
    sp.append(a)
    sp1 = [len(sp), a, sp[len(sp) -1], sp[len(sp) - 2]]
    return sp1


sp2 = []

for i in range(286564, 287271):
    sp2.append(f(i)[0])

ans = max(sp2)

sp3 = []

for i in range(286564, 287271):
    if f(i)[0] == ans:
        sp3.append([f(i)[1], f(i)[2], f(i)[3]])


pr = 0
pr1 = []
for i in sp3:
    if i[0] > pr:
        pr = i[0]
        pr1 = [ans, i[1], i[2]]

for i in pr1:
    print(i, end=' ')



